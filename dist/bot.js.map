{"version":3,"sources":["bot.js"],"names":[],"mappings":"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","file":"bot.js","sourcesContent":["import TelegramBot from 'node-telegram-bot-api';\n\nimport * as github from './github';\nimport { token } from './config';\nimport { loadTemplate, loadInlineTemplate } from './templates';\nimport commands from './commands';\n\n\nconst bot = new TelegramBot(token, { polling: true });\n\n\n// serach [repo|user|code|issue] term\nbot.onText(commands.search.regex, async (msg, matches) => {\n  const searchData = {\n    scope: matches[1],\n    term: matches[2]\n  };\n\n  const scopeKeys = Object.keys(github.scopes);\n  const scope = scopeKeys.find(item => {\n    return github.scopes[item].keywords.includes(searchData.scope);\n  });\n\n  // invalid scope\n  if (!scope) {\n    return bot.sendMessage(msg.chat.id, `I don't understand what's that \"${searchData.scope}\"!`);\n  }\n\n  const options = {\n    ...github.scopes[scope].defaultOptions,\n    q: searchData.term\n  };\n\n  const result = await github.search(scope, options);\n  bot.sendMessage(msg.chat.id, loadTemplate(scope, result), {\n    parse_mode: 'Markdown'\n  });\n});\n\nbot.on('message', msg => {\n  if (!msg.text && !msg.query) {\n    return bot.sendMessage(msg.chat.id, `Sry! I only understand text stuff.\nUse /help to get some help about my commands.`);\n  }\n\n  const commandNames = Object.keys(commands);\n  const knownCommand = commandNames.find(item => {\n    return commands[item].regex.exec(msg.text);\n  });\n  if (knownCommand && commands[knownCommand].initMessage) {\n    return bot.sendMessage(msg.chat.id, commands[knownCommand].initMessage, {\n      parse_mode: 'Markdown'\n    });\n  }\n  if (knownCommand || msg.query) {\n    return false;\n  }\n\n  bot.sendMessage(msg.chat.id, `Sry! I didn't understand that \"${msg.text}\".\nUse /help to get some help about my commands.`);\n});\n\n\nbot.on('inline_query', async msg => {\n  const commandNames = Object.keys(commands);\n  const command = commandNames.find(item => {\n    return commands[item].inlineRegex && commands[item].inlineRegex.exec(msg.query);\n  });\n\n  // if inline command not found\n  if (command !== 'search') {\n    return bot.answerInlineQuery(msg.id, [\n      {\n        id: '1',\n        type: 'article',\n        title: 'Not found',\n        description: 'Command not found!',\n        message_text: 'Command not found!'\n      }\n    ]);\n  }\n\n  const matches = commands[command].inlineRegex.exec(msg.query);\n\n  const searchData = {\n    scope: matches[1],\n    term: matches[2]\n  };\n\n  const scopeKeys = Object.keys(github.scopes);\n  const scope = scopeKeys.find(item => {\n    return github.scopes[item].keywords.includes(searchData.scope);\n  });\n\n  // invalid scope\n  if (!scope) {\n    return bot.answerInlineQuery(msg.id, [\n      {\n        id: '1',\n        type: 'article',\n        title: 'Invalid Scope',\n        description: `I don't understand what's that \"${searchData.scope}\"!`,\n        message_text: `I don't understand what's that \"${searchData.scope}\"!`\n      }\n    ]);\n  }\n\n  const options = {\n    ...github.scopes[scope].defaultOptions,\n    q: searchData.term\n  };\n  const response = await github.search(scope, options);\n\n  bot.answerInlineQuery(msg.id, loadInlineTemplate(scope, response));\n});\n\nexport default bot;\n"],"sourceRoot":"/source/"}